name: Merge

on:
  push:
    branches: [ main, "update" ]

jobs:
  package-and-upload:
    name: Package Java 21 Lambda and upload to S3
    runs-on: ubuntu-24.04-arm # we don't want to rely directly on 'ubuntu-latest'
    permissions:
      id-token: write
      contents: read
    env:
      ARTIFACT_BUCKET_NAME: ${{ vars.ARTIFACT_BUCKET_NAME || secrets.ARTIFACT_BUCKET_NAME }}
      WRITER_ROLE_ARN: ${{ vars.WRITER_ROLE_ARN || secrets.WRITER_ROLE_ARN }}
      AWS_REGION: ${{ vars.AWS_REGION || secrets.AWS_REGION }}
      ARTIFACT_PREFIX: concurrency-eval-java
    outputs:
      code_s3_key: ${{ steps.upload.outputs.code_s3_key }}
      code_s3_version: ${{ steps.upload.outputs.code_s3_version }}
    steps:
      - name: Validate required configuration
        shell: bash
        run: |
          set -euo pipefail
          : "${ARTIFACT_BUCKET_NAME?Define ARTIFACT_BUCKET_NAME as a Repository/Environment variable or Secret}"
          : "${WRITER_ROLE_ARN?Define WRITER_ROLE_ARN as a Repository/Environment variable or Secret}"
          : "${AWS_REGION?Define AWS_REGION as a Repository/Environment variable or Secret}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 21 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build shaded jar
        run: mvn -B -ntp -DskipTests package

      - name: Ensure zip available
        run: |
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y zip
          fi

      - name: Validate shaded jar contains handler class
        id: validate
        shell: bash
        run: |
          set -euo pipefail
          # Prefer the shaded artifact (exclude any original-*.jar)
          JAR_PATH=$(ls -1 target/*.jar | grep -v '/original-' | head -n1)
          if [ -z "${JAR_PATH:-}" ]; then
            echo "No shaded jar found in target/." >&2
            ls -l target || true
            exit 1
          fi
          echo "Using jar: $JAR_PATH"
          if ! jar tf "$JAR_PATH" | grep -q '^concurrencyeval/Handler.class$'; then
            echo "Handler class not found in jar: concurrencyeval/Handler.class" >&2
            jar tf "$JAR_PATH" | sed -n '1,100p' || true
            exit 1
          fi
          echo "jar_path=${JAR_PATH}" >> "$GITHUB_OUTPUT"

      - name: Create function.zip from shaded jar (root-level jar)
        id: zip
        shell: bash
        run: |
          set -euo pipefail
          JAR_PATH="${{ steps.validate.outputs.jar_path }}"
          cp "$JAR_PATH" function.jar
          # Place the jar at the root of the zip without directory prefixes
          zip -j -q function.zip function.jar
          rm -f function.jar

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.WRITER_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-artifact-upload

      - id: upload
        name: Upload artifact to S3 (capture versioned key)
        env:
          BUCKET: ${{ env.ARTIFACT_BUCKET_NAME }}
          PREFIX: ${{ env.ARTIFACT_PREFIX }}
        run: |
          set -euo pipefail
          ZIP_PATH="function.zip"
          ZIP_NAME="function.zip"
          FUNC_KEY="${PREFIX}/${ZIP_NAME}"
          FUNC_VERSION_ID=$(aws s3api put-object --bucket "$BUCKET" --key "$FUNC_KEY" --body "$ZIP_PATH" --query 'VersionId' --output text)
          echo "code_s3_key=${FUNC_KEY}" >> "$GITHUB_OUTPUT"
          echo "code_s3_version=${FUNC_VERSION_ID}" >> "$GITHUB_OUTPUT"

      - name: Summary
        run: |
          echo "Artifact uploaded:" >> $GITHUB_STEP_SUMMARY
          echo "- code_s3_key=\"${{ steps.upload.outputs.code_s3_key }}\"" >> $GITHUB_STEP_SUMMARY
          echo "- code_s3_version=\"${{ steps.upload.outputs.code_s3_version }}\"" >> $GITHUB_STEP_SUMMARY
